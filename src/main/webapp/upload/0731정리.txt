1.선언
데이터형[][]배열명=null;

2생성
배열명= new 데이터형[행의수][열의수];

1+2)
데이터형[][] 배열명=new 데이터형[행의수][열의수];

3값할당
배열명[행의 번호][열의번호] =값

4 값사용
배열명[행의번호][열의번호]

**일괄처리
for(int i=0; i< 배열명.length; i++) {//행
	for(int j=0; j <배열명[i].length; j++) {
		배열명[i][j]
	}
}//end for


개선된 for

for (일차원 배열 배열명 : 이차원배열명) {
	for( 배열방의 값을 저장 할 변수 : 일차원배열명){
	변수
}
	}

이차원 배열에 기본형 형식의 사용

문법)
데이터형[][] 배열명=(new 데이터형[][](생략)){ {값,,},{,,},{,,,} };

삼차원 배열
-면, 행, 열로 구성된 배열
-면의 수 : 배열명.length
-행의 수 : 배열명[면의 번호].length
-열의 수 : 배열명[면의 번호][면의 번호].length

문법)
1.선언
데이터형[][][]배열명=null;
데이터형배열명[][][]=null;

2.생성
배열명=new데이터형[면의수][행의수][열의수];

1+2
데이터형[][][]배열명=new데이터형[면의수][행의수][열의수];


3.값 할당
배열명[면의수][행의수][열의수]=값;

4. 값 사용
배열명[면의수][행의수][열의수]

**기본형 형식의 사용
-면 구분 괄호, 행 구분 괄호 사용

문법)
데이터형[][][] 배열명={{{값,},{,,}},{{,,},{,,}}};
EX) 
int[][][] arr3={{{1,2,3},{4,5,6}},{{7,8,9},{10,11,12}}}

-삼차원 배열의 한 면은 이차원 배열로 이루어져있다(int[][] temp=arr3[0]);
-이차원 배열의 한행은 일차원 배열로 이루어져 있다.(int[] temp=arr3[0][0]);
for (일차원 배열: 삼차원배열){
	


Variable Array(가변배열)
-행마다 열의 개수가 다른 배열
-이차원 배열 형식
사용법)
선언 > 생성 > 행마다 열을 생성 > 값할당 > 사용

1.선언)
데이터형[][] 배열형=null;

int[][] arr2=null;

2.생성) 행만 설정(열설정 하지않는다)
배열명=new 데이터형[행의수][];


arr2=new int[4][];

3. 행마다 열을 생성)
배열명[행의번호]=new 데이터형[열의수] 
<= arr2[0]=new int[3];
     arr2[1]=new int[1];
     arr2[2]=new int[]{1,2,3,4};   	
     arr2[3]=new int[]{1,2,3};
배열명[행의번호]=new 데이터형[]{값,,,,,}

4.값 할당)- 배열의 인덱스에 주의
배열명[행의 번호][열의 번호]=값;

5.값 사용)-인덱스에 주의
배열명[행의 번호][열의 번호]

**class
-참조형 데이터 형, 사용자정의 데이터 형
참조형 데이터 형 : 값은 메모리에 다른 곳에서 생성되고, 그 시작 주소를 저장하는 데이터 형
사용자정의 데이터 형 : 언어에서 제고하는 데이터 형을 조합하여, 새로운 이름의 데이터 형을 만드는 것
데이터 형 : 값을 저장하기 위해 언어에서 제공하는 이름이 있는 예약된 공간 

사용자 정의 자료형 => 업무를 구현하지 않고, 값을 저장할 목적으로 만든다

-사용자정의 데이터 형으로 클래스를 만들때에는 클래스형 뒤에 VO를 붙여준다. (VO : Value Object) => 값은 새성할때만 들어가고 외부에서 변경하지 못하ㅏ도록 만드는 객체 생성자, getter method로 구성

DTO( Data Transfer Object) - 데이터를 전달하기 위한 목적의 크래스 => 값변경이 가능
(생성자, setter, getter method 구성)

public class StudentVO{
private int stuNum;
private String name;
private int age;
private double height;
private double weight;
private String bloodTye;

생성자
setter method
getter method
}

사용자 저의 자료형 사용)
1.객체화)
StudentVO sVO=new StudentVO(1,쵸파,24,120.4,20.5,"A");

2. setter method 호출)
sVO.setName("추파");

3.getter method 호출)
sVO.getName();


**사용자 정의 자료형으로 배열 생성.

public classs StuVO{
private int stuNum;
private String name;
private int age;

constuctor()
setter method
getter method
}

1.생성
StuVO[] voArr=new StuVo[3];

2.값할당
voArr[0]=new StuVo(1,"쵸파",20);
voArr[1]=new StuVo(2,"조로",22);

3.값얻기
StuVO sVO=voArr[0];

4.getter 호출 값 얻기
int num=sVO.getStuNum();
String name=sVO.getName();
int age=sVO.getAge();


**inheritance( 상속 )
- OOP언어의 3가지 특징 중 하나. 
- 코드의 재 사용성 향상.
상속(재 사용성)-부모 클래스에 정의된 자원(변수, method)을 자식 클래스 자신의 것처럼 사용(private 제외)

-클래스 간의 계층 생성.

부모 클래스 => super class
자식 클래스(코드 재 사용성) => sub class
->자식 클래스에서 부모클래스의 자원을 자신의 것처럼 사용
자식클래스명 객체명=new 자식클래스의생성자();
EX)
객체명.setName("이름")
객체명.getName();
-코드의 재 사용성 : 자식한테는 setAge(),getAge()가 존재하지 않음.
객체명.setAge(20); //자식클래스의 객체명으로 부모클래스의 method사용가능
객체명.getAge();//자식클래스의 객체명으로 부모클래스의 method사용가능

-estends 키워드로 자식클래스에서 부모클래스를 선택한다.

public class Parent{ -> 부모에는 자식의 정보가 존재하지 않는다
public class Child extends Parent{ <- 자식에는 부모의 정보가 존재한다.(extends Parent)
 -자식은 부모이다 (자식클래스 에서 부모 클래스의 기능을 자신의 것처럼 사용)(is a관계)

문법)
접근지정자 class 클래스명 extends 부모클래스명 implment 구현인터페이스들,,,,,,{

public : 패키지 외부에서 접근가능.
package : 같은 패키ㅣ에서 접근가능.
-단일 상속만 지원 :
-부모가 명확하다. 클래스의 크기가 필요이상 커지지 않는다.
-기능 확장에 제약이 있다.

-java에 모든 클래스의 최상위 부모클래스는 java.lang.Object클래스이다

